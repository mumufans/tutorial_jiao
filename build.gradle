
apply plugin: 'groovy'

version = '2.0.0'
sourceCompatibility = '1.7'
def moquiDir = file(projectDir.absolutePath + '/../../..')
def frameworkDir = file(moquiDir.absolutePath + '/framework')

// maybe in the future: repositories { mavenCentral() }
repositories {
    flatDir name: 'localLib', dirs: frameworkDir.absolutePath + '/lib'
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'mysql:mysql-connector-java:5.1.39'

    testCompile project(':framework').configurations.testCompile.allDependencies
}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
check.dependsOn.remove(test)

jar {
    destinationDir = file(projectDir.absolutePath + '/lib')
    // this is required to change from the default that includes the path to this module (ie 'runtime/base-componet/example')
    baseName = 'pims'
}

task cleanLib(type: Delete) { delete file(jar.archivePath) }
clean.dependsOn cleanLib

task copyDependencies << {
    copy { from (configurations.runtime - project(':framework').configurations.runtime - project(':framework').jar.archivePath)
        into file(projectDir.absolutePath + '/lib') }
}

copyDependencies.dependsOn cleanLib

jar.dependsOn copyDependencies

test {
    systemProperty 'moqui.runtime', moquiDir.absolutePath + '/runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevTestConf.xml'
    systemProperty 'moqui.init.static', 'true'
    maxHeapSize = "512M"
    jvmArgs '-XX:MaxPermSize=192m'

    testLogging.showStandardStreams = true

    classpath += files(sourceSets.main.output.classesDir)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
}
